'use strict';
var fs = require('fs');
var path = require('path');
var Accessory = require('./BHSA').Accessory;
var Service = require('./BHSS').Service;
var Characteristic = require('./BHSCH').Characteristic;
var uuid = require('./util/uuid');
var debug = require('debug')('AccessoryLoader');

function loadDirectory(dir) {
  var accessories = [];
  fs.readdirSync(dir).forEach(function(file) {
    if (file.split('_').pop() === 'accessory.js') {
      debug('Parsing accessory: %s', file);
      var loadedAccessory = require(path.join(dir, file)).accessory;
      accessories.push(loadedAccessory);
    }
    else if (file.split('_').pop() === 'accfactory.js') {
      debug('Parsing accessory factory: %s', file);
      var loadedAccessories = require(path.join(dir, file));
      accessories = accessories.concat(loadedAccessories);
    }
  });

  return accessories.map(function(accessory) {
    if(accessory === null || accessory === undefined) {
      console.log("Invalid accessory!");
      return false;
    } else {
      return (accessory instanceof Accessory) ? accessory : parseAccessoryJSON(accessory);
    }
  }).filter(function(accessory) { return accessory ? true : false; });
}

function parseAccessoryJSON(json) {
  var services = [];
  json.services.forEach(function(serviceJSON) {
    var service = parseServiceJSON(serviceJSON);
    services.push(service);
  });

  var displayName = json.displayName;

  services.forEach(function(service) {
    if (service.UUID === '0000003E-0000-1000-8000-0026BB765291') {
      service.characteristics.forEach(function(characteristic) {
        if (characteristic.UUID === '00000023-0000-1000-8000-0026BB765291') {
          displayName = characteristic.value;
        }
      });
    }
  });

  var accessory = new Accessory(displayName, uuid.generate(displayName));
  accessory.username = json.username;
  accessory.pincode = json.pincode;
  accessory.services.length = 0;
  services.forEach(function(service) {
    accessory.addService(service);
  });

  return accessory;
}

function parseServiceJSON(json) {
  var serviceUUID = json.sType;
  var characteristics = [];
  json.characteristics.forEach(function(characteristicJSON) {
    var characteristic = parseCharacteristicJSON(characteristicJSON);
    characteristics.push(characteristic);
  });

  var displayName = null;
  characteristics.forEach(function(characteristic) {
    if (characteristic.UUID == '00000023-0000-1000-8000-0026BB765291')
      displayName = characteristic.value;
  });
  var service = new Service(displayName || serviceUUID, serviceUUID, displayName);

  characteristics.forEach(function(characteristic) {
    if (characteristic.UUID != '00000023-0000-1000-8000-0026BB765291')
      service.addCharacteristic(characteristic);
  });

  return service;
}

function parseCharacteristicJSON(json) {
  var characteristicUUID = json.cType;
  var characteristic = new Characteristic(json.manfDescription || characteristicUUID, characteristicUUID);
  characteristic.value = json.initialValue;
  characteristic.setProps({
    format: json.format,
    minValue: json.designedMinValue,
    maxValue: json.designedMaxValue,
    minStep: json.designedMinStep,
    unit: json.unit,
    perms: json.perms
  });

  characteristic.updateValue = function(value, peer) {
    characteristic.setValue(value);
  };

  characteristic.locals = json.locals;
  var updateFunc = json.onUpdate;
  var readFunc = json.onRead;
  var registerFunc = json.onRegister;

  if (updateFunc) {
    characteristic.on('set', function(value, callback) {
      updateFunc(value);
      callback();
    });
  }

  if (readFunc) {
    characteristic.on('get', function(callback) {
      readFunc(function(value) {
        callback(null, value);
      });
    });
  }

  if (registerFunc) {
    registerFunc(characteristic);
  }

  return characteristic;
}

module.exports = {
  loadDirectory: loadDirectory,
  parseAccessoryJSON: parseAccessoryJSON,
  parseServiceJSON: parseServiceJSON,
  parseCharacteristicJSON: parseCharacteristicJSON
};