'use strict';
var util = require('util');
var storage = require('node-persist');
var crypto = require('crypto');

function IdentifierCache(username) {
  this.username = username;
  this._cache = {};
  this._usedCache = null;
  this._savedCacheHash = "";
}

IdentifierCache.prototype.startTrackingUsage = function() {
  this._usedCache = {};
};

IdentifierCache.prototype.stopTrackingUsageAndExpireUnused = function() {
  this._cache = this._usedCache;
  this._usedCache = null;
};

IdentifierCache.prototype.getCache = function(key) {
  var value = this._cache[key];

  if (this._usedCache && typeof value !== 'undefined')
    this._usedCache[key] = value;

  return value;
};

IdentifierCache.prototype.setCache = function(key, value) {
  this._cache[key] = value;

  if (this._usedCache)
    this._usedCache[key] = value;

  return value;
};

IdentifierCache.prototype.getAID = function(accessoryUUID) {
  var key = accessoryUUID;

  this.getCache('|nextAID');

  return this.getCache(key) || this.setCache(key, this.getNextAID());
};

IdentifierCache.prototype.getIID = function(accessoryUUID, serviceUUID, serviceSubtype, characteristicUUID) {

  var key = accessoryUUID
          + '|' + serviceUUID
          + (serviceSubtype ? '|' + serviceSubtype : '')
          + (characteristicUUID ? '|' + characteristicUUID : '');

  this.getCache(accessoryUUID + '|nextIID');

  return this.getCache(key) || this.setCache(key, this.getNextIID(accessoryUUID));
};

IdentifierCache.prototype.getNextAID = function() {
  var key = '|nextAID';
  var nextAID = this.getCache(key) || 2;
  this.setCache(key, nextAID + 1);
  return nextAID;
};

IdentifierCache.prototype.getNextIID = function(accessoryUUID) {
  var key = accessoryUUID + '|nextIID';
  var nextIID = this.getCache(key) || 2;
  this.setCache(key, nextIID + 1);
  return nextIID;
};

IdentifierCache.persistKey = function(username) {
  return util.format("%s.bhpfile.json", username.replace(/:/g,"").toUpperCase());
};

IdentifierCache.load = function(username) {
  var key = IdentifierCache.persistKey(username);
  var saved = storage.getItem(key);

  if (saved) {
    var info = new IdentifierCache(username);
    info._cache = saved.cache;
    info._savedCacheHash = crypto.createHash('sha1').update(JSON.stringify(info._cache)).digest('hex');
    return info;
  }
  else {
    return null;
  }
};

IdentifierCache.prototype.save = function() {
  var newCacheHash = crypto.createHash('sha1').update(JSON.stringify(this._cache)).digest('hex');
  if (newCacheHash != this._savedCacheHash) {
    var saved = {
      cache: this._cache
    };

    var key = IdentifierCache.persistKey(this.username);

    storage.setItemSync(key, saved);
    storage.persistSync();
    this._savedCacheHash = newCacheHash;
  }
};

IdentifierCache.prototype.remove = function () {
  var key = IdentifierCache.persistKey(this.username);

  storage.removeItemSync(key);
};

module.exports = {
  IdentifierCache: IdentifierCache
};