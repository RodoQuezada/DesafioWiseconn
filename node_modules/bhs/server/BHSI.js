'use strict';

var path = require('path');
var fs = require('fs');
var plist = require('simple-plist');
var Characteristic = require('./BHSCH').Characteristic;

var plistPath = '/Applications/HomeKit Accessory Simulator.app/Contents/Frameworks/HAPAccessoryKit.framework/Versions/A/Resources/default.metadata.plist';
var metadata = plist.readFileSync(plistPath);

var outputPath = path.join(__dirname, 'BHSHKT.js');
var output = fs.createWriteStream(outputPath);

output.write("// THIS FILE IS AUTO-GENERATED - DO NOT MODIFY\n");
output.write("\n");
output.write("var inherits = require('util').inherits;\n");
output.write("var Characteristic = require('./BHSCH').Characteristic;\n");
output.write("var Service = require('./BHSS').Service;\n");
output.write("\n");

var characteristics = {};

for (var index in metadata.Characteristics) {
  var characteristic = metadata.Characteristics[index];
  var classyName = characteristic.Name.replace(/[\s\-]/g, "");
  classyName = classyName.replace(/[.]/g, "_");
  characteristics[characteristic.UUID] = classyName;
  output.write("/**\n * Characteristic \"" + characteristic.Name + "\"\n */\n\n");
  output.write("Characteristic." + classyName + " = function() {\n");
  output.write("  Characteristic.call(this, '" + characteristic.Name + "', '" + characteristic.UUID + "');\n");
  output.write("  this.setProps({\n");
  output.write("    format: Characteristic.Formats." + getCharacteristicFormatsKey(characteristic.Format));

  if (characteristic.Unit)
    output.write(",\n    unit: Characteristic.Units." + getCharacteristicUnitsKey(characteristic.Unit));

  if (characteristic.Constraints && typeof characteristic.Constraints.MaximumValue !== 'undefined')
    output.write(",\n    maxValue: " + characteristic.Constraints.MaximumValue);

  if (characteristic.Constraints && typeof characteristic.Constraints.MinimumValue !== 'undefined')
    output.write(",\n    minValue: " + characteristic.Constraints.MinimumValue);

  if (characteristic.Constraints && typeof characteristic.Constraints.StepValue !== 'undefined')
    output.write(",\n    minStep: " + characteristic.Constraints.StepValue);

  output.write(",\n    perms: [");
  var sep = ""
  for (var i in characteristic.Properties) {
    var perms = getCharacteristicPermsKey(characteristic.Properties[i]);
    if (perms) {
        output.write(sep + "Characteristic.Perms." + getCharacteristicPermsKey(characteristic.Properties[i]));
        sep = ", "
    }
  }
  output.write("]");
  output.write("\n  });\n");
  output.write("  this.value = this.getDefaultValue();\n");
  output.write("};\n\n");
  output.write("inherits(Characteristic." + classyName + ", Characteristic);\n\n");
  output.write("Characteristic." + classyName + ".UUID = '" + characteristic.UUID + "';\n\n");

  if (characteristic.Constraints && characteristic.Constraints.ValidValues) {

    output.write("// The value property of " + classyName + " must be one of the following:\n");

    for (var value in characteristic.Constraints.ValidValues) {
      var name = characteristic.Constraints.ValidValues[value];
      var constName = name.toUpperCase().replace(/[^\w]+/g, '_');
      if ((/^[1-9]/).test(constName)) constName = "_" + constName;
      output.write("Characteristic." + classyName + "." + constName + " = " + value + ";\n");
    }

    output.write("\n");
  }
}

for (var index in metadata.Services) {
  var service = metadata.Services[index];
  var classyName = service.Name.replace(/[\s\-]/g, "");

  output.write("/**\n * Service \"" + service.Name + "\"\n */\n\n");
  output.write("Service." + classyName + " = function(displayName, subtype) {\n");
  output.write("  Service.call(this, displayName, '" + service.UUID + "', subtype);\n");

  if (service.RequiredCharacteristics) {
    output.write("\n  // Required Characteristics\n");

    for (var index in service.RequiredCharacteristics) {
      var characteristicUUID = service.RequiredCharacteristics[index];
      var characteristicClassyName = characteristics[characteristicUUID];
      output.write("  this.addCharacteristic(Characteristic." + characteristicClassyName + ");\n");
    }
  }

  if (service.OptionalCharacteristics) {
    output.write("\n  // Optional Characteristics\n");

    for (var index in service.OptionalCharacteristics) {
      var characteristicUUID = service.OptionalCharacteristics[index];
      var characteristicClassyName = characteristics[characteristicUUID];
      output.write("  this.addOptionalCharacteristic(Characteristic." + characteristicClassyName + ");\n");
    }
  }

  output.write("};\n\n");
  output.write("inherits(Service." + classyName + ", Service);\n\n");
  output.write("Service." + classyName + ".UUID = '" + service.UUID + "';\n\n");
}

output.write("var HomeKitTypesBridge = require('./BHSHKTB');\n\n");

output.end();

function getCharacteristicFormatsKey(format) {
  if (format == 'int32') format = 'int';
  for (var key in Characteristic.Formats)
    if (Characteristic.Formats[key] == format)
      return key;

  throw new Error("Unknown characteristic format '" + format + "'");
}

function getCharacteristicUnitsKey(units) {
  for (var key in Characteristic.Units)
    if (Characteristic.Units[key] == units)
      return key;

  throw new Error("Unknown characteristic units '" + units + "'");
}

function getCharacteristicPermsKey(perm) {
  switch (perm) {
    case "read": return "READ";
    case "write": return "WRITE";
    case "cnotify": return "NOTIFY";
    case "uncnotify": return undefined;
    default: throw new Error("Unknown characteristic permission '" + perm + "'");
  }
}
