'use strict';
var debug = require('debug')('Accessory');
var crypto = require('crypto');
var inherits = require('util').inherits;
var EventEmitter = require('events').EventEmitter;
var clone = require('./util/clone').clone;
var uuid = require('./util/uuid');
var Service = require('./BHSS').Service;
var Characteristic = require('./BHSCH').Characteristic;
var HomeKitTypes = require('./BHSHKT');
var Advertiser = require('./BHSAR').Advertiser;
var HAPServer = require('./BHSHS').HAPServer;
var AccessoryInfo = require('./BHSAI').AccessoryInfo;
var IdentifierCache = require('./BHSIC').IdentifierCache;
var bufferShim = require('buffer-shims');

function Accessory(displayName, UUID) {

  if (!displayName) throw new Error("Accessories must be created with a non-empty displayName.");
  if (!UUID) throw new Error("Accessories must be created with a valid UUID.");
  if (!uuid.isValid(UUID)) throw new Error("UUID '" + UUID + "' is not a valid UUID. Try using the provided 'generateUUID' function to create a valid UUID from any arbitrary string, like a serial number.");

  this.displayName = displayName;
  this.UUID = UUID;
  this.aid = null;
  this._isBridge = false;
  this.bridged = false;
  this.bridgedAccessories = [];
  this.reachable = true;
  this.category = Accessory.Categories.OTHER;
  this.services = [];
  this.cameraSource = null;
  this.shouldPurgeUnusedIDs = true;

  this
    .addService(Service.AccessoryInformation)
    .setCharacteristic(Characteristic.Name, displayName)
    .setCharacteristic(Characteristic.Manufacturer, "Undefined")
    .setCharacteristic(Characteristic.Model, "Undefined")
    .setCharacteristic(Characteristic.SerialNumber, "Undefined")
    .setCharacteristic(Characteristic.FirmwareRevision, "0.0.1");

  this
    .getService(Service.AccessoryInformation)
    .getCharacteristic(Characteristic.Identify)
    .on('set', function(value, callback) {
      if (value) {
        var paired = true;
        this._identificationRequest(paired, callback);
      }
    }.bind(this));
}

inherits(Accessory, EventEmitter);

Accessory.Categories = {
  OTHER: 1,
  BRIDGE: 2,
  FAN: 3,
  GARAGE_DOOR_OPENER: 4,
  LIGHTBULB: 5,
  DOOR_LOCK: 6,
  OUTLET: 7,
  SWITCH: 8,
  THERMOSTAT: 9,
  SENSOR: 10,
  ALARM_SYSTEM: 11,
  SECURITY_SYSTEM: 11,
  DOOR: 12,
  WINDOW: 13,
  WINDOW_COVERING: 14,
  PROGRAMMABLE_SWITCH: 15,
  RANGE_EXTENDER: 16,
  CAMERA: 17,
  IP_CAMERA: 17,
  VIDEO_DOORBELL: 18,
  AIR_PURIFIER: 19,
  AIR_HEATER: 20,
  AIR_CONDITIONER: 21,
  AIR_HUMIDIFIER: 22,
  AIR_DEHUMIDIFIER: 23,
  APPLE_TV: 24,
  SPEAKER: 26,
  AIRPORT: 27,
  SPRINKLER: 28,
  FAUCET: 29,
  SHOWER_HEAD: 30
}

Accessory.prototype._identificationRequest = function(paired, callback) {
  debug("[%s] Identification request", this.displayName);

  if (this.listeners('identify').length > 0) {
    this.emit('identify', paired, callback);
  }
  else {
    debug("[%s] Identification request ignored; no listeners to 'identify' event", this.displayName);
    callback();
  }
}

Accessory.prototype.addService = function(service) {
  if (typeof service === 'function')
    service = new (Function.prototype.bind.apply(service, arguments));

  for (var index in this.services) {
    var existing = this.services[index];
    if (existing.UUID === service.UUID) {
      if (!service.subtype)
        throw new Error("Cannot add a Service with the same UUID '" + existing.UUID + "' as another Service in this Accessory without also defining a unique 'subtype' property.");

      if (service.subtype.toString() === existing.subtype.toString())
        throw new Error("Cannot add a Service with the same UUID '" + existing.UUID + "' and subtype '" + existing.subtype + "' as another Service in this Accessory.");
    }
  }

  this.services.push(service);

  if (!this.bridged) {
    this._updateConfiguration();
  } else {
    this.emit('service-configurationChange', clone({accessory:this, service:service}));
  }

  service.on('service-configurationChange', function(change) {
    if (!this.bridged) {
      this._updateConfiguration();
    } else {
      this.emit('service-configurationChange', clone({accessory:this, service:service}));
    }
  }.bind(this));

  service.on('characteristic-change', function(change) {
    this.emit('service-characteristic-change', clone(change, {service:service}));

    if (!this.bridged)
      this._handleCharacteristicChange(clone(change, {accessory:this, service:service}));

  }.bind(this));

  return service;
}

Accessory.prototype.setPrimaryService = function (service) {
    var targetServiceIndex;
    for (var index in this.services) {
        var existingService = this.services[index];

        if (existingService === service) {
            targetServiceIndex = index;
            break;
        }
    }

    if (targetServiceIndex) {

        for (var index in this.services)
            this.services[index].isPrimaryService = false;

        existingService.isPrimaryService = true

        if (!this.bridged) {
            this._updateConfiguration();
        } else {
            this.emit('service-configurationChange', clone({ accessory: this, service: service }));
        }
    }
}

Accessory.prototype.removeService = function(service) {
  var targetServiceIndex;

  for (var index in this.services) {
    var existingService = this.services[index];

    if (existingService === service) {
      targetServiceIndex = index;
      break;
    }
  }

  if (targetServiceIndex) {
    this.services.splice(targetServiceIndex, 1);

    if (!this.bridged) {
      this._updateConfiguration();
    } else {
      this.emit('service-configurationChange', clone({accessory:this, service:service}));
    }

    service.removeAllListeners();
  }
}

Accessory.prototype.getService = function(name) {
  for (var index in this.services) {
    var service = this.services[index];

    if (typeof name === 'string' && (service.displayName === name || service.name === name || service.subtype === name))
      return service;
    else if (typeof name === 'function' && ((service instanceof name) || (name.UUID === service.UUID)))
      return service;
  }
}

Accessory.prototype.updateReachability = function(reachable) {
  if (!this.bridged)
    throw new Error("Cannot update reachability on non-bridged accessory!");
  this.reachable = reachable;

  debug('Reachability update is no longer being supported.');
}

Accessory.prototype.addBridgedAccessory = function(accessory, deferUpdate) {
  if (accessory._isBridge)
    throw new Error("Cannot Bridge another Bridge!");

  for (var index in this.bridgedAccessories) {
    var existing = this.bridgedAccessories[index];
    if (existing.UUID === accessory.UUID)
      throw new Error("Cannot add a bridged Accessory with the same UUID as another bridged Accessory: " + existing.UUID);
  }

  accessory.on('service-characteristic-change', function(change) {
    this._handleCharacteristicChange(clone(change, {accessory:accessory}));
  }.bind(this));

  accessory.on('service-configurationChange', function(change) {
    this._updateConfiguration();
  }.bind(this));

  accessory.bridged = true;
  this.bridgedAccessories.push(accessory);

  if(!deferUpdate) {
    this._updateConfiguration();
  }

  return accessory;
}

Accessory.prototype.addBridgedAccessories = function(accessories) {
  for (var index in accessories) {
    var accessory = accessories[index];
    this.addBridgedAccessory(accessory, true);
  }

  this._updateConfiguration();
}

Accessory.prototype.removeBridgedAccessory = function(accessory, deferUpdate) {
  if (accessory._isBridge)
    throw new Error("Cannot Bridge another Bridge!");

  var foundMatchAccessory = false;
  for (var index in this.bridgedAccessories) {
    var existing = this.bridgedAccessories[index];
    if (existing.UUID === accessory.UUID) {
      foundMatchAccessory = true;
      this.bridgedAccessories.splice(index, 1);
      break;
    }
  }

  if (!foundMatchAccessory)
    throw new Error("Cannot find the bridged Accessory to remove.");

  accessory.removeAllListeners();

  if(!deferUpdate) {
    this._updateConfiguration();
  }
}

Accessory.prototype.removeBridgedAccessories = function(accessories) {
  for (var index in accessories) {
    var accessory = accessories[index];
    this.removeBridgedAccessory(accessory, true);
  }

  this._updateConfiguration();
}

Accessory.prototype.removeAllBridgedAccessories = function() {
  for (var i = this.bridgedAccessories.length - 1; i >= 0; i --) {
    this.removeBridgedAccessory(this.bridgedAccessories[i], true);
  }
  this._updateConfiguration();
}

Accessory.prototype.getCharacteristicByIID = function(iid) {
  for (var index in this.services) {
    var service = this.services[index];
    var characteristic = service.getCharacteristicByIID(iid);
    if (characteristic) return characteristic;
  }
}

Accessory.prototype.getBridgedAccessoryByAID = function(aid) {
  for (var index in this.bridgedAccessories) {
    var accessory = this.bridgedAccessories[index];
    if (accessory.aid === aid) return accessory;
  }
}

Accessory.prototype.findCharacteristic = function(aid, iid) {
  var accessory = (aid === 1) ? this : this.getBridgedAccessoryByAID(aid);

  return accessory && accessory.getCharacteristicByIID(iid);
}

Accessory.prototype.configureCameraSource = function(cameraSource) {
  this.cameraSource = cameraSource;
  for (var index in cameraSource.services) {
    var service = cameraSource.services[index];
    this.addService(service);
  }
}

Accessory.prototype.setupURI = function() {
  if (this._setupURI) {
    return this._setupURI;
  }

  var buffer = bufferShim.alloc(8);
  var setupCode = parseInt(this._accessoryInfo.pincode.replace(/-/g, ''), 10);

  var value_low = setupCode;
  var value_high = this._accessoryInfo.category >> 1;

  value_low |= 1 << 28;

  buffer.writeUInt32BE(value_low, 4);

  if (this._accessoryInfo.category & 1) {
    buffer[4] = buffer[4] | 1 << 7;
  }

  buffer.writeUInt32BE(value_high, 0);

  var encodedPayload = (buffer.readUInt32BE(4) + (buffer.readUInt32BE(0) * Math.pow(2, 32))).toString(36).toUpperCase();

  if (encodedPayload.length != 9) {
    for (var i = 0; i <= 9 - encodedPayload.length; i++) {
      encodedPayload = "0" + encodedPayload;
    }
  }

  this._setupURI = "X-HM://" + encodedPayload + this._setupID;
  return this._setupURI;
}

Accessory.prototype._assignIDs = function(identifierCache) {

  if (this._identifierCache && this.shouldPurgeUnusedIDs) {
    this._identifierCache.startTrackingUsage();
  }

  if (this.bridged) {

    this.aid = identifierCache.getAID(this.UUID)
  }
  else {
    this.aid = 1;
  }

  for (var index in this.services) {
    var service = this.services[index];
    if (this._isBridge) {
      service._assignIDs(identifierCache, this.UUID, 2000000000);
    } else {
      service._assignIDs(identifierCache, this.UUID);
    }
  }

  for (var index in this.bridgedAccessories) {
    var accessory = this.bridgedAccessories[index];

    accessory._assignIDs(identifierCache);
  }

  if (this._identifierCache) {

    if (this.shouldPurgeUnusedIDs)
      this._identifierCache.stopTrackingUsageAndExpireUnused();
    this._identifierCache.save();
  }
}

Accessory.prototype.disableUnusedIDPurge = function() {
  this.shouldPurgeUnusedIDs = false;
}

Accessory.prototype.enableUnusedIDPurge = function() {
  this.shouldPurgeUnusedIDs = true;
}

Accessory.prototype.purgeUnusedIDs = function() {
  var oldValue = this.shouldPurgeUnusedIDs;
  this.shouldPurgeUnusedIDs = true;
  this._assignIDs(this._identifierCache);
  this.shouldPurgeUnusedIDs = oldValue;
}

Accessory.prototype.toHAP = function(opt) {

  var servicesHAP = [];

  for (var index in this.services) {
    var service = this.services[index];
    servicesHAP.push(service.toHAP(opt));
  }

  var accessoriesHAP = [{
    aid: this.aid,
    services: servicesHAP
  }];

  for (var index in this.bridgedAccessories) {
    var accessory = this.bridgedAccessories[index];
    var bridgedAccessoryHAP = accessory.toHAP(opt);

    accessoriesHAP.push(bridgedAccessoryHAP[0])
  }

  return accessoriesHAP;
}

Accessory.prototype.publish = function(info, allowInsecureRequest) {
  this._accessoryInfo = AccessoryInfo.load(info.username);

  if (!this._accessoryInfo) {
    debug("[%s] Creating new AccessoryInfo for our HAP server", this.displayName);
    this._accessoryInfo = AccessoryInfo.create(info.username);
  }

  if (info.setupID) {
    this._setupID = info.setupID;
  } else if (this._accessoryInfo.setupID === undefined || this._accessoryInfo.setupID === "") {
    this._setupID = this._generateSetupID();
  } else {
    this._setupID = this._accessoryInfo.setupID;
  }

  this._accessoryInfo.setupID = this._setupID;
  this._accessoryInfo.displayName = this.displayName;
  this._accessoryInfo.category = info.category || Accessory.Categories.OTHER;
  this._accessoryInfo.pincode = info.pincode;
  this._accessoryInfo.save();
  this._identifierCache = IdentifierCache.load(info.username);

  if (!this._identifierCache) {
    debug("[%s] Creating new IdentifierCache", this.displayName);
    this._identifierCache = new IdentifierCache(info.username);
  }

  if (this._isBridge && this.bridgedAccessories.length == 0)
    this.disableUnusedIDPurge();

  this._assignIDs(this._identifierCache);

  var config = this.toHAP({omitValues:true});

  var shasum = crypto.createHash('sha1');
  shasum.update(JSON.stringify(config));
  var configHash = shasum.digest('hex');

  if (configHash !== this._accessoryInfo.configHash) {

    this._accessoryInfo.configVersion++;
    this._accessoryInfo.configHash = configHash;
    this._accessoryInfo.save();
  }

  this._advertiser = new Advertiser(this._accessoryInfo);
  this._server = new HAPServer(this._accessoryInfo, this.relayServer);
  this._server.allowInsecureRequest = allowInsecureRequest
  this._server.on('listening', this._onListening.bind(this));
  this._server.on('identify', this._handleIdentify.bind(this));
  this._server.on('pair', this._handlePair.bind(this));
  this._server.on('unpair', this._handleUnpair.bind(this));
  this._server.on('accessories', this._handleAccessories.bind(this));
  this._server.on('get-characteristics', this._handleGetCharacteristics.bind(this));
  this._server.on('set-characteristics', this._handleSetCharacteristics.bind(this));
  this._server.on('session-close', this._handleSessionClose.bind(this));

  if (this.cameraSource) {
      this._server.on('request-resource', this._handleResource.bind(this));
  }

  var targetPort = info.port || 0;
  this._server.listen(targetPort);
}

Accessory.prototype.destroy = function() {
  if (this._server) {
    this._server.stop();
    this._server = undefined;
  }
  if (this._advertiser) {
    this._advertiser.stopAdvertising();
    this._advertiser = undefined;
  }
  if (this._accessoryInfo) {
      this._accessoryInfo.remove();
      this._accessoryInfo = undefined;
  }
  if (this._identifierCache) {
      this._identifierCache.remove();
      this._identifierCache = undefined;
  }
}

Accessory.prototype._updateConfiguration = function() {
  if (this._advertiser && this._advertiser.isAdvertising()) {
    var config = this.toHAP({omitValues:true});
    var shasum = crypto.createHash('sha1');
    shasum.update(JSON.stringify(config));
    var configHash = shasum.digest('hex');

    if (configHash !== this._accessoryInfo.configHash) {

      this._accessoryInfo.configVersion++;
      this._accessoryInfo.configHash = configHash;
      this._accessoryInfo.save();
    }

    this._advertiser.updateAdvertisement();
  }
}

Accessory.prototype._onListening = function(port) {
  this._advertiser.startAdvertising(port);
  this.emit('listening', port);
}

Accessory.prototype._handleIdentify = function(callback) {
  var paired = false;
  this._identificationRequest(paired, callback);
}

Accessory.prototype._handlePair = function(username, publicKey, callback) {

  debug("[%s] Paired with client %s", this.displayName, username);
  this._accessoryInfo.addPairedClient(username, publicKey);
  this._accessoryInfo.save();
  this._advertiser.updateAdvertisement();

  callback();
}


Accessory.prototype._handleUnpair = function(username, callback) {

  debug("[%s] Unpairing with client %s", this.displayName, username);
  this._accessoryInfo.removePairedClient(username);
  this._accessoryInfo.save();
  this._advertiser.updateAdvertisement();

  callback();
}

Accessory.prototype._handleAccessories = function(callback) {

  this._assignIDs(this._identifierCache);
  callback(null, {
    accessories: this.toHAP()
  });
}

Accessory.prototype._handleGetCharacteristics = function(data, events, callback, remote, connectionID) {

  var characteristics = [];
  var statusKey = remote ? 's' : 'status';
  var valueKey = remote ? 'v' : 'value';

  data.forEach(function(characteristicData) {
    var aid = characteristicData.aid;
    var iid = characteristicData.iid;

    var includeEvent = characteristicData.e;

    var characteristic = this.findCharacteristic(characteristicData.aid, characteristicData.iid);

    if (!characteristic) {
      debug('[%s] Could not find a Characteristic with iid of %s and aid of %s', this.displayName, characteristicData.aid, characteristicData.iid);
      var response = {
        aid: aid,
        iid: iid
      };
      response[statusKey] = HAPServer.Status.SERVICE_COMMUNICATION_FAILURE;
      characteristics.push(response);

      if (characteristics.length === data.length)
        callback(null, characteristics);

      return;
    }

    debug('[%s] Getting value for Characteristic "%s"', this.displayName, characteristic.displayName);
    var context = events;

    characteristic.getValue(function(err, value) {

      debug('[%s] Got Characteristic "%s" value: %s', this.displayName, characteristic.displayName, value);

      if (err) {
        debug('[%s] Error getting value for Characteristic "%s": %s', this.displayName, characteristic.displayName, err.message);
        var response = {
          aid: aid,
          iid: iid
        };
        response[statusKey] = hapStatus(err);
        characteristics.push(response);
      }
      else {
        var response = {
          aid: aid,
          iid: iid
        };
        response[valueKey] = value;
        response[statusKey] = 0;

        if (includeEvent) {
          var eventName = aid + '.' + iid;
          response['e'] = (events[eventName] === true);
        }

        characteristics.push(response);
      }

      if (characteristics.length === data.length)
        callback(null, characteristics);

    }.bind(this), context, connectionID);

  }.bind(this));
}

Accessory.prototype._handleSetCharacteristics = function(data, events, callback, remote, connectionID) {

  debug("[%s] Processing characteristic set: %s", this.displayName, JSON.stringify(data));
  var characteristics = [];

  data.forEach(function(characteristicData) {
    var aid = characteristicData.aid;
    var iid = characteristicData.iid;
    var value = remote ? characteristicData.v : characteristicData.value;
    var ev = remote ? characteristicData.e : characteristicData.ev;
    var includeValue = characteristicData.r || false;

    var statusKey = remote ? 's' : 'status';

    var characteristic = this.findCharacteristic(aid, iid);

    if (!characteristic) {
      debug('[%s] Could not find a Characteristic with iid of %s and aid of %s', this.displayName, characteristicData.aid, characteristicData.iid);
      var response = {
        aid: aid,
        iid: iid
      };
      response[statusKey] = HAPServer.Status.SERVICE_COMMUNICATION_FAILURE;
      characteristics.push(response);

      if (characteristics.length === data.length)
        callback(null, characteristics);

      return;
    }

    var context = events;
    if (typeof ev !== 'undefined') {
      debug('[%s] %s Characteristic "%s" for events', this.displayName, ev ? "Registering" : "Unregistering", characteristic.displayName);
      var eventName = aid + '.' + iid;

      if (ev === true && events[eventName] != true) {
        events[eventName] = true;
        characteristic.subscribe();
      }

      if (ev === false && events[eventName] != undefined) {
        characteristic.unsubscribe();
        delete events[eventName];
      }
    }

    if (typeof value !== 'undefined') {

      debug('[%s] Setting Characteristic "%s" to value %s', this.displayName, characteristic.displayName, value);

      characteristic.setValue(value, function(err) {

        if (err) {
          debug('[%s] Error setting Characteristic "%s" to value %s: ', this.displayName, characteristic.displayName, value, err.message);

          var response = {
            aid: aid,
            iid: iid
          };
          response[statusKey] = hapStatus(err);
          characteristics.push(response);
        }
        else {
          var response = {
            aid: aid,
            iid: iid
          };
          response[statusKey] = 0;

          if (includeValue)
            response['v'] = characteristic.value;

          characteristics.push(response);
        }

        if (characteristics.length === data.length)
          callback(null, characteristics);

      }.bind(this), context, connectionID);

    }
    else {
      var response = {
        aid: aid,
        iid: iid
      };
      response[statusKey] = 0;
      characteristics.push(response);

      if (characteristics.length === data.length)
        callback(null, characteristics);
    }

  }.bind(this));
}

Accessory.prototype._handleResource = function(data, callback) {
  if (data["resource-type"] == "image") {
    if (this.cameraSource) {
      this.cameraSource.handleSnapshotRequest({
        width: data["image-width"],
        height: data["image-height"]
      }, callback);
      return;
    }
  }

  callback('resource not found');
}

Accessory.prototype._handleSessionClose = function(sessionID, events) {
  if (this.cameraSource && this.cameraSource.handleCloseConnection) {
      this.cameraSource.handleCloseConnection(sessionID);
  }

  this._unsubscribeEvents(events);
}

Accessory.prototype._unsubscribeEvents = function (events) {
  for (var key in events) {
    if (key.indexOf('.') !== -1) {
      try {
        var id = key.split('.');
        var aid = Number.parseInt(id[0]);
        var iid = Number.parseInt(id[1]);

        var characteristic = this.findCharacteristic(aid, iid);
        if (characteristic) {
          characteristic.unsubscribe();
        }
      }
      catch (e) {
      }
    }
  }
}

Accessory.prototype._handleCharacteristicChange = function(change) {
  if (!this._server)
    return;

  var data = {
    characteristics: [{
      aid: change.accessory.aid,
      iid: change.characteristic.iid,
      value: change.newValue
    }]
  };

  var eventName = change.accessory.aid + '.' + change.characteristic.iid;
  var excludeEvents = change.context;
  this._server.notifyClients(eventName, data, excludeEvents);
}

Accessory.prototype._setupService = function(service) {
  service.on('service-configurationChange', function(change) {
    if (!this.bridged) {
      this._updateConfiguration();
    } else {
      this.emit('service-configurationChange', clone({accessory:this, service:service}));
    }
  }.bind(this));

  service.on('characteristic-change', function(change) {
    this.emit('service-characteristic-change', clone(change, {service:service}));

    if (!this.bridged)
      this._handleCharacteristicChange(clone(change, {accessory:this, service:service}));

  }.bind(this));
}

Accessory.prototype._sideloadServices = function(targetServices) {
  for (var index in targetServices) {
    var target = targetServices[index];
    this._setupService(target);
  }

  this.services = targetServices.slice();

  this
    .getService(Service.AccessoryInformation)
    .getCharacteristic(Characteristic.Identify)
    .on('set', function(value, callback) {
      if (value) {
        var paired = true;
        this._identificationRequest(paired, callback);
      }
    }.bind(this));
}

Accessory.prototype._generateSetupID = function() {
  var chars = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ';
  var bytes = crypto.randomBytes(4);
  var setupID = '';

  for (var i = 0; i < 4; i++) {
    var index = bytes.readUInt8(i) % 26;
    setupID += chars.charAt(index);
  }

  return setupID;
}

function hapStatus(err) {

  var value = 0;

  for( const k in HAPServer.Status ) {
    if (HAPServer.Status[k] == err.message)
    {
      value = err.message;
      break;
    }
  }

  if ( value == 0 )
    value = HAPServer.Status.SERVICE_COMMUNICATION_FAILURE;

  return(parseInt(value));
}

module.exports = {
  Accessory: Accessory
};