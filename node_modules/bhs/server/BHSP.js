'use strict';
var path = require('path');
var fs = require('fs');
var semver = require('semver');
var User = require('./BHSU').User;
var version = require('./BHSV');
var log = require("./BHSLR")._system;

function Plugin(pluginPath) {
  this.pluginPath = pluginPath;
  this.initializer;
}

Plugin.prototype.name = function() {
  return path.basename(this.pluginPath);
}

Plugin.prototype.load = function(options) {
  options = options || {};

  if (!fs.existsSync(this.pluginPath)) {
    throw new Error("Plugin " + this.pluginPath + " was not found. Make sure the module '" + this.pluginPath + "' is installed.");
  }

  var pjson = Plugin.loadPackageJSON(this.pluginPath);

  if (pjson.peerDepdendencies && (!pjson.engines || !pjson.engines.bioxhome)) {
    var engines = pjson.engines || {}
    engines.bioxhome = pjson.peerDepdendencies.bioxhome;
    pjson.engines = engines;
  }

  if (!pjson.engines || !pjson.engines.bioxhome) {
    throw new Error("Plugin " + this.pluginPath + " does not contain the 'bioxhome' package in 'engines'.");
  }

  var versionRequired = pjson.engines.bioxhome;

  if (!semver.satisfies(version, versionRequired)) {
    throw new Error("Plugin " + this.pluginPath + " requires a BioXHOME version of " + versionRequired + " which does not satisfy the current BioXHOME version of " + version + ". You may need to upgrade your installation of BioXHOME.");
  }

  var nodeVersionRequired = pjson.engines.node;

  if (nodeVersionRequired && !semver.satisfies(process.version, nodeVersionRequired)) {
    log.warn("Plugin " + this.pluginPath + " requires Node version of " + nodeVersionRequired + " which does not satisfy the current Node version of " + process.version + ". You may need to upgrade your installation of Node.");
  }

  var main = pjson.main || "./index.js";
  var mainPath = path.join(this.pluginPath, main);
  this.initializer = require(mainPath);
}

Plugin.loadPackageJSON = function(pluginPath) {

  var pjsonPath = path.join(pluginPath, "package.json");
  var pjson = null;

  if (!fs.existsSync(pjsonPath)) {
    throw new Error("Plugin " + pluginPath + " does not contain a package.json.");
  }

  try {
    pjson = JSON.parse(fs.readFileSync(pjsonPath));
  }
  catch (err) {
    throw new Error("Plugin " + pluginPath + " contains an invalid package.json. Error: " + err);
  }

  if (!pjson.name || pjson.name.indexOf('bioxhome-') != 0) {
    throw new Error("Plugin " + pluginPath + " does not have a package name that begins with 'bioxhome-'.");
  }

  if (!pjson.keywords || pjson.keywords.indexOf("bioxhome-plugin") == -1) {
    throw new Error("Plugin " + pluginPath + " package.json does not contain the keyword 'bioxhome-plugin'.");
  }

  return pjson;
}

Plugin.getDefaultPaths = function() {
  var win32 = process.platform === 'win32';
  var paths = [];
  paths = paths.concat(require.main.paths);
  if (process.env.NODE_PATH) {
    paths = process.env.NODE_PATH.split(path.delimiter)
      .filter(function(p) { return !!p; })
      .concat(paths);
  } else {

    if (win32) {
      paths.push(path.join(process.env.APPDATA, 'npm/node_modules'));
    } else {
      paths.push('/usr/local/lib/node_modules');
      paths.push('/usr/lib/node_modules');
      const exec = require('child_process').execSync;
      paths.push(exec('/bin/echo -n "$(npm -g prefix)/lib/node_modules"').toString('utf8'));
    }
  }
  return paths;
}

Plugin.paths = Plugin.getDefaultPaths();

Plugin.addPluginPath = function(pluginPath) {
  Plugin.paths.unshift(path.resolve(process.cwd(), pluginPath));
}

Plugin.installed = function() {

  var plugins = [];
  var pluginsByName = {};
  var searchedPaths = {};

  for (var index in Plugin.paths) {
    var requirePath = Plugin.paths[index];

    if (searchedPaths[requirePath])
      continue;

    searchedPaths[requirePath] = true;

    if (!fs.existsSync(requirePath))
      continue;

    var names = fs.readdirSync(requirePath);

    if (fs.existsSync(path.join(requirePath, "package.json")))
      names = [""];

    for (var index2 in names) {
      var name = names[index2];

      var pluginPath = path.join(requirePath, name);
      try {
        if (!fs.statSync(pluginPath).isDirectory()) continue;
      } catch (e) {
        continue;
      }
      var pjson;
      try {
        pjson = Plugin.loadPackageJSON(pluginPath);
      }
      catch (err) {
        if (!name || name.indexOf('bioxhome-') == 0) {
          log.warn(err.message);
        }

        continue;
      }

      if (!name) name = pjson.name;

      if (!pluginsByName[name]) {
        pluginsByName[name] = pluginPath;
        plugins.push(new Plugin(pluginPath));
      }
      else {
        log.warn("Warning: skipping plugin found at '" + pluginPath + "' since we already loaded the same plugin from '" + pluginsByName[name] + "'.");
      }
    }
  }

  return plugins;
}

module.exports = {
  Plugin: Plugin
};