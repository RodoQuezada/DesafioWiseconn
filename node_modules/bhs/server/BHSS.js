'use strict';

var inherits = require('util').inherits;
var clone = require('./util/clone').clone;
var EventEmitter = require('events').EventEmitter;
var Characteristic = require('./BHSCH').Characteristic;

module.exports = {
  Service: Service
};

function Service(displayName, UUID, subtype) {

  if (!UUID) throw new Error("Services must be created with a valid UUID.");

  this.displayName = displayName;
  this.UUID = UUID;
  this.subtype = subtype;
  this.iid = null;
  this.characteristics = [];
  this.optionalCharacteristics = [];
  this.isHiddenService = false;
  this.isPrimaryService = false;
  this.linkedServices = [];

  if (displayName) {
    var nameCharacteristic =
      this.getCharacteristic(Characteristic.Name) ||
      this.addCharacteristic(Characteristic.Name);

    nameCharacteristic.setValue(displayName);
  }
}

inherits(Service, EventEmitter);

Service.prototype.addCharacteristic = function (characteristic) {
  if (typeof characteristic === 'function') {
    characteristic = new (Function.prototype.bind.apply(characteristic, arguments));
  }
  for (var index in this.characteristics) {
    var existing = this.characteristics[index];
    if (existing.UUID === characteristic.UUID) {
      if (characteristic.UUID === '00000052-0000-1000-8000-0026BB765291') {
        return existing;
      }
      throw new Error("Cannot add a Characteristic with the same UUID as another Characteristic in this Service: " + existing.UUID);
    }
  }

  characteristic.on('change', function (change) {
    this.emit('characteristic-change', clone(change, { characteristic: characteristic }));
  }.bind(this));

  this.characteristics.push(characteristic);

  this.emit('service-configurationChange', clone({ service: this }));

  return characteristic;
}

Service.prototype.setHiddenService = function (isHidden) {
  this.isHiddenService = isHidden;
  this.emit('service-configurationChange', clone({ service: this }));
}

Service.prototype.addLinkedService = function (newLinkedService) {
  if (!this.linkedServices.includes(newLinkedService))
    this.linkedServices.push(newLinkedService);
  this.emit('service-configurationChange', clone({ service: this }));
}

Service.prototype.removeLinkedService = function (oldLinkedService) {
  if (this.linkedServices.includes(oldLinkedService))
    this.linkedServices.splice(this.linkedServices.indexOf(oldLinkedService), 1);
  this.emit('service-configurationChange', clone({ service: this }));
}

Service.prototype.removeCharacteristic = function (characteristic) {
  var targetCharacteristicIndex;

  for (var index in this.characteristics) {
    var existingCharacteristic = this.characteristics[index];

    if (existingCharacteristic === characteristic) {
      targetCharacteristicIndex = index;
      break;
    }
  }

  if (targetCharacteristicIndex) {
    this.characteristics.splice(targetCharacteristicIndex, 1);
    characteristic.removeAllListeners();

    this.emit('service-configurationChange', clone({ service: this }));
  }
}

Service.prototype.getCharacteristic = function (name) {
  var index, characteristic;
  for (index in this.characteristics) {
    characteristic = this.characteristics[index];
    if (typeof name === 'string' && characteristic.displayName === name) {
      return characteristic;
    }
    else if (typeof name === 'function' && ((characteristic instanceof name) || (name.UUID === characteristic.UUID))) {
      return characteristic;
    }
  }
  if (typeof name === 'function') {
    for (index in this.optionalCharacteristics) {
      characteristic = this.optionalCharacteristics[index];
      if ((characteristic instanceof name) || (name.UUID === characteristic.UUID)) {
        return this.addCharacteristic(name);
      }
    }
    if (name !== Characteristic.Name) {
      console.warn("HAP Warning: Characteristic %s not in required or optional characteristics for service %s. Adding anyway.", name.UUID, this.UUID);
      return this.addCharacteristic(name);
    }
  }
};

Service.prototype.testCharacteristic = function (name) {
  var index, characteristic;
  for (index in this.characteristics) {
    characteristic = this.characteristics[index];
    if (typeof name === 'string' && characteristic.displayName === name) {
      return true;
    }
    else if (typeof name === 'function' && ((characteristic instanceof name) || (name.UUID === characteristic.UUID))) {
      return true;
    }
  }
  return false;
}

Service.prototype.setCharacteristic = function (name, value) {
  this.getCharacteristic(name).setValue(value);
  return this;
}

Service.prototype.updateCharacteristic = function (name, value) {
  this.getCharacteristic(name).updateValue(value);
  return this;
}

Service.prototype.addOptionalCharacteristic = function (characteristic) {
  if (typeof characteristic === 'function')
    characteristic = new characteristic();

  this.optionalCharacteristics.push(characteristic);
}

Service.prototype.getCharacteristicByIID = function (iid) {
  for (var index in this.characteristics) {
    var characteristic = this.characteristics[index];
    if (characteristic.iid === iid)
      return characteristic;
  }
}

Service.prototype._assignIDs = function (identifierCache, accessoryName, baseIID) {
  if (baseIID === undefined) {
    baseIID = 0;
  }
  if (this.UUID === '0000003E-0000-1000-8000-0026BB765291') {
    this.iid = 1;
  }
  else {
    this.iid = baseIID + identifierCache.getIID(accessoryName, this.UUID, this.subtype);
  }

  for (var index in this.characteristics) {
    var characteristic = this.characteristics[index];
    characteristic._assignID(identifierCache, accessoryName, this.UUID, this.subtype);
  }
}

Service.prototype.toHAP = function (opt) {

  var characteristicsHAP = [];

  for (var index in this.characteristics) {
    var characteristic = this.characteristics[index];
    characteristicsHAP.push(characteristic.toHAP(opt));
  }

  var hap = {
    iid: this.iid,
    type: this.UUID,
    characteristics: characteristicsHAP
  };

  if (this.isPrimaryService !== undefined) {
    hap['primary'] = this.isPrimaryService;
  }

  if (this.isHiddenService !== undefined) {
    hap['hidden'] = this.isHiddenService;
  }

  if (this.linkedServices.length > 0) {
    hap['linked'] = [];
    for (var index in this.linkedServices) {
      var otherService = this.linkedServices[index];
      hap['linked'].push(otherService.iid);
    }
  }

  return hap;
}

Service.prototype._setupCharacteristic = function (characteristic) {
  characteristic.on('change', function (change) {
    this.emit('characteristic-change', clone(change, { characteristic: characteristic }));
  }.bind(this));
}

Service.prototype._sideloadCharacteristics = function (targetCharacteristics) {
  for (var index in targetCharacteristics) {
    var target = targetCharacteristics[index];
    this._setupCharacteristic(target);
  }

  this.characteristics = targetCharacteristics.slice();
}
